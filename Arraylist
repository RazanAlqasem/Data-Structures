# 🧠 ArrayList 

لو حكيتلك تخزّن شوية أغراض بعلبة، بس ما بتعرف كم غرض رح يزيد أو ينقص مع الوقت... شو بتعمل؟
 أكيد رح تختار علبة مرنة… تكبر وتصغُر حسب الحاجة، صح؟
 هيك بالضبط الــ araaylist

---

##  شو هي ArrayList؟
- هي قائمة مرتبة (يعني العناصر فيها بتيجي حسب الترتيب).
- حجمها مش ثابت، بتكبر كل ما ضفت عناصر.
- بتقدر توصل لأي عنصر فيها حسب رقمه (index).
- بتقدر تضيف، تشيل، تعدل على راحتك.

---

## 💡 ببساطة :

تخيلها كأنها دفتر، كل سطر فيه عنصر، وإذا بدك تضيف، بزيد سطر… وإذا بدك تشيل، بتمسح السطر… بس بنفس الترتيب

---
## 📌 متى أستخدم ArrayList بدل Array؟
- لما ما بتعرف عدد العناصر مسبقًا.
- لما بدك تضيف وتشيل عناصر بشكل متكرر.
- لما بدك تكتب كود مرن وقابل للتعديل بسهولة.

---
## الفرق بين ArrayList و Array عادي

| الخاصية          | Array (ثابت الحجم)    | ArrayList (مرن الحجم)           |
|------------------|-----------------------|--------------------------------|
| الحجم            | ثابت  | ديناميكي  |
| تعديل الحجم      | مستحيل بعد الإنشاء    |  أوتوماتيكيًا)    |
| نوع البيانات     | عناصر من نفس النوع فقط | يدعم أنواع مختلفة حسب اللغة      |
| الأداء           | أسرع            | أبطأ  بسبب الديناميكية    |
| الوصول للعناصر   | سريع  | سريع        |
| استخدام شائع    | لما تعرف عدد العناصر مسبقًا | لما تحتاج قائمة مرنة ومتغيرة     |

---

##  كيف نستخدم ArrayList؟

| اللغة       | الدالة / الطريقة              | الوصف                           |
|-------------|------------------------------|--------------------------------|
| **Java**    | `add(element)`                | بتضيف عنصر جديد في نهاية القائمة  |
|             | `remove(element or index)`    | بتحذف عنصر معين أو حسب الموقع     |
|             | `set(index, element)`         | بتعدل العنصر في موقع معين         |
|             | `get(index)`                  | بترجع العنصر الموجود في موقع معين |
|             | `size()`                     | بترجع عدد العناصر في القائمة     |
| **C++**     | `push_back(element)`          | بتضيف عنصر جديد في نهاية القائمة  |
|             | `erase(iterator)`             | بتحذف عنصر حسب المؤشر             |
|             | `std::remove`                 | بتبحث وتحذف عنصر معين             |
|             | `[]`                         | للوصول أو تعديل عنصر حسب الموقع  |
|             | `size()`                     | بترجع عدد العناصر في القائمة     |
| **JavaScript** | `push(element)`             | بتضيف عنصر جديد في نهاية القائمة  |
|             | `splice(index, 1)`            | بتحذف عنصر حسب الموقع             |
|             | `indexOf(element)`            | بترجع موقع عنصر معين              |
|             | `includes(element)`           | بتفحص إذا العنصر موجود            |
|             | `length`                     | بترجع عدد العناصر في القائمة     |
| **Python**  | `append(element)`             | بتضيف عنصر جديد في نهاية القائمة  |
|             | `remove(element)`             | بتحذف عنصر معين                  |
|             | `[]`                         | للوصول أو تعديل عنصر حسب الموقع  |
|             | `len()`                      | بترجع عدد العناصر في القائمة     |
|             | `in`                         | بتفحص إذا العنصر موجود            |

---

## امثلة :
### java :

 ```java 
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> fruits = new ArrayList<>();

        // إضافة عناصر
        fruits.add("Apple");
        fruits.add("Banana");
        fruits.add("Cherry");

        // طباعة العناصر
        System.out.println("Fruits list: " + fruits);

        // تعديل العنصر في الموقع 1
        fruits.set(1, "Blueberry");

        // حذف العنصر "Cherry"
        fruits.remove("Cherry");

        // الوصول للعنصر الأول
        System.out.println("First fruit: " + fruits.get(0));

        // التحقق من وجود "Banana"
        System.out.println("Contains Banana? " + fruits.contains("Banana"));

        // عدد العناصر
        System.out.println("Size: " + fruits.size());

        // تفريغ القائمة
        fruits.clear();

        System.out.println("Size after clear: " + fruits.size());
    }
}

```
### JavaScript

```javascript

let fruits = [];

fruits.push("Apple");
fruits.push("Banana");
fruits.push("Cherry");

console.log(fruits);

fruits[1] = "Blueberry";
fruits.splice(fruits.indexOf("Cherry"), 1);

console.log(fruits[0]);
console.log(fruits.includes("Banana"));
console.log(fruits.length);

fruits = [];
console.log(fruits.length);

```
---

## بتقبل تكرار العناصر؟

✅ اهه ، بتقدر تخزن نفس العنصر أكتر من مرة.

## امثلة  :
```java

ArrayList<String> list = new ArrayList<>();
list.add("apple");
list.add("apple"); // مقبول تمامًا

```

---

## ملاحظات :
اجباري المواقع تكون متتالية في الذاكرة ولو احتجت مساحة اكبر بتحجز موقع جديد في الذاكرة بمساحة اكبر 
طيب لو احتجت مساحة اكبر  بس مش موجود مساحة متتالية تكفي المساحة الي بدي اياها شو الحل ؟ بهاي الحالة رح يصير
عندي خلل بالبرنامج وما بقدر احجز arraylist  
ليش لازم تكون العناصر متتالية ؟ مشان يسهل عليه يوصل للعناصر ويروحلهم مباشرة 

---

## مشاكل
 الـ ArrayList ممتازة لما بدك تضيف عناصر وتتعامل معها بطريقة مرتبة وسريعة، بس... لما بدك تضيف أو تحذف عنصر من البداية أو من النص، بتبلّدا المشاكل! ليش؟
لأنها بتضطر تحرك كل العناصر اللي بعدها عشان تعوّض الفراغ، وهيك بصير الكود أبطأ.
